openapi: 3.0.1

info:
  title: Bazario marketplace Panel API
  description: |
    The Bazario marketplace Panel API is a comprehensive RESTful API
    that serves as the backbone of the marketplace`s digital platform.
    It provides a wide range of endpoints for managing crud-operation of ad, users
    and admins.

  version: v0.0.1

servers:
  - url: https://bazario-mkur.onrender.com
    description: Remote service for managing platform of the Bazario marketplace
  - url: http://127.0.0.1:8080
    description: Local service for managing platform of the Bazario marketplace

tags:
  - name: Authentication
    description: |
      Endpoints for user authentication.
  - name: User
    description: |
      Endpoints for users to manage yourself.
      Includes registration, updating, deleting user`s account.
  - name: Type user parameter
    description: |
      Endpoints for users manage type user parameter.
  - name: Reset Password
    description: |
      Endpoints for users reset password.
  - name: Favorite
    description: |
      Endpoints for users to manage favorite ad on the website.
  - name: Comment
    description: |
      Endpoints for managing comments in the user API.
      This API handles operations such as adding, updating, 
      deleting comments, and calculating the rating.
  - name: Category
    description: |
      Endpoint for admin and user to manage category.
  - name: Ad
    description: |
      Endpoints for users to manage ad on the website.
  - name: Type ad parameter
    description: |
      Endpoints for admin to manage type ad parameters on the website.
  - name: Image
    description: |
      Endpoints for users to manage image on the website.

paths:
  /anonymous/login:
    post:
      tags:
        - Authentication
      security:
        - bearerAuth: [ ]
      description: User login endpoint
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        200:
          description: Authenticated successfully. Get token.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT_REFRESH_TOKEN=abcs123
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/refreshToken:
    post:
      tags:
        - Authentication
      description: User login endpoint using the refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Authenticated successfully. Get token.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT_REFRESH_TOKEN=abcs123
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/logout:
    post:
      tags:
        - Authentication
      security:
        - bearerAuth: []
      description: |
        User logout endpoint. Replacing the refresh token 
        in cookies with a zero-expiration token.
      operationId: logoutToken
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
      responses:
        204:
          description: Logout successfully.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JWT_REFRESH_TOKEN=abcs123
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /anonymous/registration:
    post:
      tags:
        - User
      security:
        - bearerAuth: [ ]
      summary: Save form registration
      description: |
        Save the registration form in the cache. 
        It will be added to the database when you confirm your email.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        201:
          description: Registration data load successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationRequest'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/send/{type}:
    post:
      tags:
        - User
      summary: Send message to email of user
      description: Send verification link or reset link to email of user
      operationId: sendMessage
      parameters:
        - $ref: '#/components/parameters/typeEmailMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
        required: true
      responses:
        204:
          description: Send link to email
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /anonymous/email/verify:
    post:
      tags:
        - User
      security:
        - bearerAuth: [ ]
      summary: Confirm email
      description: |
        Confirm email after uploading user registration data.
        Saving data from cache to database.
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationEmail'
        required: true
      responses:
        204:
          description: Registration successfully.
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/user:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Get user information
      description: Get user information
      operationId: getUserInformation
      responses:
        200:
          description: Get user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserInformation'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Update user
      description: |
        Update user`s field. If update email you will also need verify it.
        Role  change only root user and isLocked field change admin or root.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
        required: true
      responses:
        200:
          description: Update user fields successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserInformation'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Change user email and block user
      description: |
        Change user email by add prefix "delete_" and block user.
        Change the status of the user's ads to DELETE.
      operationId: deleteUser
      responses:
        204:
          description: User deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/user/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Get other user information
      description: Get other user information
      operationId: getOtherUserInformation
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Get other user information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInformation'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/user/{id}:
    get:
      tags:
        - User
      summary: Get public information about user
      description: Get public information about user
      operationId: getPublicUserInformation
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Get public information about user successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserInformation'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/user/{id}:
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Update user by admin
      description: |
        Update user`s field by admin. Role change only root.
        IsLocked fields change admin or root.
      operationId: updateUserByAdmin
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
        required: true
      responses:
        200:
          description: Update user`s fields successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserInformation'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - User
      summary: Delete user by admin
      description: Deletes user by admin by user id.
      operationId: deleteUserByAdmin
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: User deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/user/parameter:
    post:
      security:
        - bearerAuth: []
      tags:
        - Type user parameter
      summary: Creating a user parameter type by the administrator
      description: Creating a user parameter type by the administrator
      operationId: createUserParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAdminParameter'
        required: true
      responses:
        201:
          description: Create a user parameter type. Get id of user parameter
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/user/parameter/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Type user parameter
      summary: Put user parameter by admin
      description: Put user parameter by admin
      operationId: putUserParameter
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAdminParameter'
        required: true
      responses:
        200:
          description: Change user parameter type successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAdminParameterResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Type user parameter
      security:
        - bearerAuth: []
      summary: Delete user parameter by admin
      description: Delete user parameter by admin
      operationId: deleteUserParameter
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Delete user parameter successful.
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /anonymous/resetPassword:
    post:
      tags:
        - Reset Password
      security:
        - bearerAuth: [ ]
      summary: Reset password of user
      description: Reset password of user by hex.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      responses:
        204:
          description: Reset password successful.
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/favorites:
    get:
      security:
        -  bearerAuth: []
      tags:
        - Favorite
      summary: Get favorite ad
      description: Get favorite ad
      operationId: getFavorite
      parameters:
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        200:
          description: Get favorite ad successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAd'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/favorite/{id}:
    post:
      security:
        -  bearerAuth: []
      tags:
        - Favorite
      summary: Add favorite add
      description: Add favorite add
      operationId: addFavorite
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Add favorite ad successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        -  bearerAuth: []
      tags:
        - Favorite
      summary: Delete favorite ad
      description: Delete ad from the favorite list
      operationId: deleteFavorite
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Delete favorite ad successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/comment/user/{id}/totalRating:
    get:
      tags:
        - Comment
      summary: Get total rating of user by user`s id
      description: Get total rating of user by user`s id from comment list of user
      operationId: getTotalRating
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Get comment successfully
          content:
            application/json:
              schema:
                type: number
                format: double
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/comment/user/{id}:
    get:
      tags:
        - Comment
      summary: Get comments for user by user`s id
      description: |
        Get comments for user by user`s id from comment list of user<br>
        A map of key-value pairs for filtering.<br>
        Example Pageable:  "size":"16", "page":"0","sort":"rating,desc"(field,asc|desc)<br>
      operationId: getComments
      parameters:
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        200:
          description: Get comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComment'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/comment/user/{id}:
    post:
      security:
        -  bearerAuth: []
      tags:
        - Comment
      summary: Add comment for user by user`s id
      description: Add comment for user by user`s id to comment list of user
      operationId: addComment
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
        required: true
      responses:
        200:
          description: Add comment successfully. Get id of comment
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/comment/{id}:
    put:
      security:
        -  bearerAuth: []
      tags:
        - Comment
      summary: Put comment for user by id
      description: Put comment for user by id to comment list of user
      operationId: putComment
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
        required: true
      responses:
        204:
          description: Add comment successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        -  bearerAuth: []
      tags:
        - Comment
      summary: Delete comment by id
      description: Delete comment by id from comment list of user
      operationId: deleteComment
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Delete comment successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/categories:
    get:
      tags:
        - Category
      summary: Get categories
      description: Get categories
      operationId: getCategories
      responses:
        200:
          description: Get categories successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/category/{id}:
    get:
      tags:
        - Category
      summary: Get category
      description: |
        Get a category with related types of parameters 
        that will be used in filters.
      operationId: getCategory
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Get categories successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDto'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/category:
    post:
      security:
        -  bearerAuth: []
      tags:
        - Category
      summary: Add category by admin
      description: |
        Add category with related types of parameters and 
        without image by admin
      operationId: addCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
        required: true
      responses:
        201:
          description: Add category successfully. Get id of category
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/category/{id}:
    put:
      security:
        -  bearerAuth: []
      tags:
        - Category
      summary: Put category by admin
      description: |
        Put category with related types of parameters and
        without image by admin
      operationId: putCategory
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
        required: true
      responses:
        204:
          description: Add category successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        -  bearerAuth: []
      tags:
        - Category
      summary: Delete category by admin by categories id
      description: Delete category by admin
      operationId: deleteCategory
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Add category successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/ad/parameters:
    get:
      tags:
        - Type ad parameter
      security:
        - bearerAuth: []
      summary: Get page of ad parameter
      description: Get page of ad parameter with pagination
      operationId: getAdParameters
      parameters:
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        200:
          description: Get ad parameters successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageParameters'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/ad/parameter:
    post:
      tags:
        - Type ad parameter
      security:
        -  bearerAuth: []
      summary: Create ad parameter by admin
      description: Create ad parameter by admin
      operationId: createAdParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAdminParameter'
        required: true
      responses:
        201:
          description: Get id of ad parameter
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/ad/parameter/{id}:
    put:
      tags:
        - Type ad parameter
      security:
        -  bearerAuth: []
      summary: Put ad parameter by admin
      description: Put ad parameter by admin
      operationId: PutAdParameter
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAdminParameter'
        required: true
      responses:
        200:
          description: Put ad parameter successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAdminParameterResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Type ad parameter
      security:
        -  bearerAuth: []
      summary: Delete ad parameter by admin
      description: Delete ad parameter by admin
      operationId: deleteAdParameter
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Delete ad parameter successful.
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/ads/leaderBoard:
    get:
      tags:
        - Ad
      summary: Get ads leader board
      description: |
        The number of ads depends on the size of the cache.<br>
        When exceeded, ads with a lower score will be removed from the cache <br>
        when adding new ones, except for new ads with a trial period.
        Get page with dto contains ad and score by filter.<br>
        Filter contains pagination and/or max, min score.<br>
        Example: "size":"16", "page":"0","sort":"desc", "min":"5", "max":"125"
      operationId: getAdsLeaderBoard
      parameters:
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        200:
          description: Get ads leader board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageLeaderBoardAd'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/ads:
    get:
      tags:
        - Ad
      security:
        - bearerAuth: [ ]
      summary: Get ads
      description: |
        Get ads by filter.<br>
        A map of key-value pairs for filtering.<br>
        Example Pageable:  "size":"16", "page":"0","sort":"price,desc"(field,asc|desc)<br>
        Example search: "title":"abc"<br>
        Example ad parameter: "ad_id_256":"Bosh|Samsung|LG"(ad_id_ is type ad id prefix, | is separator for multi parameter)<br>
        Example user parameter: "user_id_35":"Student"(user_id is type user id prefix)<br>
        Example price: "price":"10.53||156.20"(10.53<= price <=156.20, || is separator)<br>
        Example rating: "rating":"2.5||7.8","rating":"3||10"<br>
        Example distance: "distance":"100"
      operationId: getAds
      parameters:
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        200:
          description: Get ads successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAd'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/ad/{id}:
    get:
      tags:
        - Ad
      security:
        - bearerAuth: [ ]
      summary: Get ad
      description: Get ad by id
      operationId: getAd
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Get ad successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdDto'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /public/compares/ad/{ids}:
    get:
      tags:
        - Ad
      security:
        - bearerAuth: [ ]
      summary: Compares ad
      description: Compares ad parameter by ads
      operationId: comparesAd
      parameters:
        - in: path
          required: true
          name: ids
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        200:
          description: Compare ads successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCompareAd'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/ad:
    post:
      tags:
        - Ad
      security:
        -  bearerAuth: []
      summary: Create or get ad by user
      description: Create or get ad with status NEW without image files by user
      operationId: createOrGetAd
      responses:
        200:
          description: Create ad successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdDto'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /private/ad/{id}:
    patch:
      tags:
        - Ad
      security:
        -  bearerAuth: []
      summary: Patch ad by user
      description: |
        Patching a user's ad by ad ID. The user is not 
        patching an announcement with the NEW status or 
        is not its owner. Changing the status to DELETE 
        deletes files from the remote storage. Changing 
        the status of an ad with the status of ACTIVE or 
        DISABLED is possible only if one or more photos 
        are available.
      operationId: patchAd
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAd'
        required: true
      responses:
        204:
          description: Change ad successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/ad/{id}:
    delete:
      tags:
        - Ad
      security:
        -  bearerAuth: []
      summary: Delete ad by admin
      description: Delete ad of user by admin by ad`s id
      operationId: deleteAd
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: Delete ad successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /image/{type}/{id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Image
      description: |
        Load and save image. If type is ad than parameter id is ad\`s id, 
        added by a registered user.
        If type is avatar parameter id is user\`s id, added by a registered user.
        If type is catalog parameter id is catalog\`s id, add only administrator.
      operationId: saveImage
      parameters:
        - $ref: '#/components/parameters/typeImage'
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Created image successful.
          content:
            application/json:
              schema:
                type:  string
                format: uri
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        413:
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      security:
        - bearerAuth: []
      tags:
        - Image
      description: |
        Load and change image.If type is ad than parameter id is ad\`s id,
        added by a registered user.
        If type is avatar parameter id is user\`s id, added by a registered user.
        If type is catalog parameter id is catalog\`s id, add only administrator.
      operationId: changeImage
      parameters:
        - $ref: '#/components/parameters/typeImage'
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                oldValue:
                  type: string
                  format: uri
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Change image successful.
          content:
            application/json:
              schema:
                type: string
                format: uri
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        413:
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Image
      description: |
        Delete image. Parameter id is ad or user id. 
        If type is ad than parameter id is ad\`s id.
        If type is avatar parameter id is user\`s id. If type is catalog 
        parameter id is catalog\`s id, delete only administrator.
      operationId: deleteImage
      parameters:
        - $ref: '#/components/parameters/typeImage'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/urlParameter'
      responses:
        204:
          description: Delete image successful.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    AuthenticationRequest:
      description:  Authentication form
      type: object
      properties:
        login:
          type: string
          pattern: '^(\+38|38|8)?0\d{9}$|^[\w.%+-]+@[\w.-]+\.[a-zA-Z]{2,}$'
          x-pattern-message: "Format must be email or phone number"
        password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\w#@&]{8,}$'
          x-pattern-message: "The password field must contain at least: 
          one lowercase English letter, one uppercase English letter, 
          one digit. It can also optionally contain a punctuation mark (#@&).
          The number of characters is at least 8"
    ErrorResponse:
      description: Error message with timestamp
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    EmailRequest:
      type: object
      description: Email for request
      properties:
        email:
          type: string
          format: email
    VerificationEmail:
      type: object
      description: Verify email
      properties:
        email:
          type: string
          format: email
        hex:
          type: string
    ResetPassword:
      description: Reset password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\w#@&]{8,}$'
          x-pattern-message: "The password field must contain at least: 
          one lowercase English letter, one uppercase English letter, 
          one digit. It can also optionally contain a punctuation mark (#@&).
          The number of characters is at least 8"
        hex:
          type: string
    RegistrationRequest:
      description: Registration form of user
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\w#@&]{8,}$'
          x-pattern-message: "The password field must contain at least: 
          one lowercase English letter, one uppercase English letter, 
          one digit. It can also optionally contain a punctuation mark (#@&).
          The number of characters is at least 8"
        firstName:
          type: string
          pattern: '^[A-ZА-ЯІЇЄ][a-zа-яіїє]{1,20}$'
          x-pattern-message: "The name must contain the first 
          capital Ukrainian letter and the following lowercase
           Ukrainian letters. The number of characters is between 1 and 20."
        phoneNumber:
          type: string
          pattern: '^(\+38|38|8)?0\d{9}$'
          x-pattern-message: "The phone number may or may not contain any characters 
          (+38 or 38 or 8). Next comes the number 0 and 9 more characters after it."
    PublicUserInformation:
      description: Public user information
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
        cityName:
          type: string
    UserInformation:
      description: Private user information
      allOf:
        - $ref: '#/components/schemas/PublicUserInformation'
      type: object
      properties:
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        distance:
          type: number
          format: double
    PrivateUserInformation:
      description: Full user information
      allOf:
        - $ref: '#/components/schemas/PublicUserInformation'
      type: object
      properties:
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        cityCoordinate:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicParameter'
    PatchUser:
      description: Patch user field
      allOf:
        - $ref: '#/components/schemas/RegistrationRequest'
      type: object
      properties:
        lastName:
          type: string
          pattern: '^[A-ZА-ЯІЇЄ][a-zа-яіїє]{1,20}$'
          x-pattern-message: "The name must contain the first 
          capital Ukrainian letter and the following lowercase
           Ukrainian letters. The number of characters is between 1 and 20."
        cityName:
          type: string
          minLength: 3
          maxLength: 100
        cityCoordinate:
          type: string
          pattern: '^\d+\.?\d*\|\d\.?\d*$'
          x-pattern-message: "City coordinates contain width and longitude values 
          separated by a separator (|). Values contain one or more digits before 
          the decimal point and may or may not contain digits after the decimal 
          point. Values contain one or more digits before the decimal point and may 
          or may not contain digits after the decimal point."
        userParameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicUserParameter'
        role:
          type: string
        isLocked:
          type: boolean
    BasicUserParameter:
      description: Basis user parameter for user or ad
      type: object
      properties:
        id:
          type: integer
          format: int64
        typeName:
          type: string
        typeId:
          type: integer
          format: int64
        parameterValue:
          type: string
    BasicAdminParameter:
      description: Basis admin parameter for user or ad
      type: object
      properties:
        name:
          type: string
        restrictionPattern:
          type: string
        descriptionPattern:
          type: string
    BasicAdminParameterResponse:
      allOf:
        - $ref: '#/components/schemas/BasicAdminParameter'
      type: object
      properties:
        id:
          type: integer
          format: int64
    BasicParameter:
      allOf:
        - $ref: '#/components/schemas/BasicUserParameter'
      type: object
      properties:
        restrictionPattern:
          type: string
        descriptionPattern:
          type: string
    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
    CategoryRequestDto:
      type: object
      properties:
        name:
          type: string
        adParameterIds:
          type: array
          items:
            type: integer
            format: int64
        userParameterIds:
          type: array
          items:
            type: integer
            format: int64
    CategoryResponseDto:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        adParameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicAdminParameterResponse'
        userParameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicAdminParameterResponse'
    CommentDto:
      description: A user's comment about another user who added an ad
      type: object
      properties:
        rating:
          type: integer
          format: int32
          minimum: 0
          maximum: 9
        description:
          type: string
          pattern: '^(?!.*\d{9,})(?!.*http)[А-ЯІЇЄа-яіїє\w\s\,\.\!\?]{3,200}$'
          x-pattern-message: "The text consists of letters, numbers, and 
          punctuation marks (.!?,) from 3 to 200 characters long. It cannot 
          contain phone numbers (digits greater than 9) or hyperlinks."
    AdDto:
      description: Ad information
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
            format: uri
        price:
          type: number
        adParameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicUserParameter'
    PatchAd:
      description: Patch ad
      type: object
      properties:
        title:
          type: string
          pattern: '^(?!.*\d{9,})(?!.*http)[А-ЯІЇЄа-яіїє\w\s\,\.\!\?]{3,20}$'
          x-pattern-message: "The text consists of letters, numbers, and 
          punctuation marks (.!?,) from 3 to 20 characters long. It cannot 
          contain phone numbers (digits greater than 9) or hyperlinks."
        description:
          type: string
          pattern: '^(?!.*\d{9,})(?!.*http)[А-ЯІЇЄа-яіїє\w\s\,\.\!\?]{3,200}$'
          x-pattern-message: "The text consists of letters, numbers, and 
          punctuation marks (.!?,) from 3 to 200 characters long. It cannot 
          contain phone numbers (digits greater than 9) or hyperlinks."
        price:
          type: number
        categoryId:
          type: integer
          format: int64
        adParameters:
          type: array
          items:
            $ref: '#/components/schemas/BasicUserParameter'
        status:
          $ref: '#/components/schemas/AdStatus'
    AdStatus:
      type: string
      enum:
        - NEW
        - ACTIVE
        - DISABLE
        - DELETE
      default: "ACTIVE"
    TypeImage:
      type: string
      enum:
        - AD
        - AVATAR
        - CATEGORY
    TypeEmailMessage:
      type: string
      enum:
        - VERIFY
        - RESET
    AdResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        price:
          type: number
        category:
          type: integer
          format: int64
    AdLeaderBoardDto:
      allOf:
        - $ref: '#/components/schemas/AdResponseDto'
      type: object
      properties:
        score:
          type: integer
          format: int64
    PageParameters:
      type: object
      description: return Page<BasicAdminParameterResponse>
      x-extends: BasisPage
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BasicAdminParameterResponse'
    PageAd:
      type: object
      description: return Page<AdResponseDto>
      x-extends: BasisPage
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdResponseDto'
    PageLeaderBoardAd:
      type: object
      description: return Page<AdLeaderBoardDto>
      x-extends: BasisPage
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdLeaderBoardDto'
    PageComment:
      type: object
      description: return Page<CommentDto>
      x-extends: BasisPage
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
    ItemComparesDto:
      type: object
      properties:
        name:
          type: string
        score:
          type: number
          format: double
        percent:
          type: number
          format: double
    AdComparesDto:
      allOf:
        - $ref: '#/components/schemas/AdResponseDto'
      type: object
      properties:
        compares:
          type: array
          items:
            $ref: '#/components/schemas/ItemComparesDto'
    PageCompareAd:
      type: object
      properties:
        min-max:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              min:
                type: number
                format: double
              max:
                type: number
                format: double
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdComparesDto'
  parameters:
    idParam:
      name: id
      in: path
      required: true
      description: Unique identifier of entity
      schema:
        type: integer
        format: int64
    typeImage:
      name: type
      in: path
      required: true
      schema:
        $ref:  '#/components/schemas/TypeImage'
    typeEmailMessage:
      name: type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TypeEmailMessage'
    basisParameter:
      name: params
      in: query
      required: false
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                value:
                  type: string
    filtersParameter:
      name: filters
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: object
        additionalProperties:
          type: string
    urlParameter:
      name: url
      in: query
      required: true
      schema:
        type: string
        format: uri
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT